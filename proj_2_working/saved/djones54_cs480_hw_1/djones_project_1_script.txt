**********************
Windows PowerShell transcript start
Start time: 20200902025044
Username: DESKTOP-770NDM7\David.Jones
RunAs User: DESKTOP-770NDM7\David.Jones
Configuration Name: 
Machine: DESKTOP-770NDM7 (Microsoft Windows NT 10.0.18363.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 51892
PSVersion: 5.1.18362.752
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.18362.752
BuildVersion: 10.0.18362.752
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\Users\David.Jones\Documents\PowerShell_transcript.DESKTOP-770NDM7.MelGz6+x.20200902025044.txt
PS C:\Users\David.Jones\Downloads\aipython> py -m IPython
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.18.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: edit pythonDemo.py
Editing... done. Executing edited code...
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [2]: edit pythonDemo.py
Editing... done. Executing edited code...
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [3]: edit pythonDemo.py
Editing... done. Executing edited code...
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [4]: edit pythonDemo.py
Editing... done. Executing edited code...
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [5]: edit -i pythonDemo.py
UsageError: option -i not recognized ( allowed: "prxn:" )

In [6]: edit pythonDemo.py
Editing... done. Executing edited code...
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [7]: load pythonDemo.py

   ...:         i += step
   ...:
   ...: print("myrange(2,30,3):",list(myrange(2,30,3)))
   ...:
   ...: def ga(n):
   ...:     """generates square of even nonnegative integers less than n"""
   ...:     for e in range(n):
   ...:         if e%2==0:
   ...:             yield e*e
   ...: a = ga(20)
   ...:
   ...: def myenumerate(enum):
   ...:     for i in range(len(enum)):
   ...:         yield i,enum[i]
   ...:
   ...: import matplotlib.pyplot as plt
   ...:
   ...: def myplot(min,max,step,fun1,fun2):
   ...:     # plt.ion()  # make it interactive - COMMENTED OUT on 9/2/2020
   ...:     plt.xlabel("The x axis")
   ...:     plt.ylabel("The y axis")
   ...:     plt.xscale('linear')  # Makes a 'log' or 'linear' scale
   ...:     xvalues = range(min,max,step)
   ...:     plt.plot(xvalues,[fun1(x) for x in xvalues],
   ...:                 label="The first fun")
   ...:     plt.plot(xvalues,[fun2(x) for x in xvalues], linestyle='--',color='k',
   ...:                 label=fun2.__doc__)  # use the doc string of the function
   ...:     plt.legend(loc="upper right")    # display the legend
   ...:
   ...: def slin(x):
   ...:     """y=2x+7"""
   ...:     return 2*x+7
   ...: def sqfun(x):
   ...:     """y=(x-40)^2/10-20"""
   ...:     return (x-40)**2/10-20
   ...:
   ...: # Try the following: - UNCOMMENTED OUT on 9/2/2020
   ...: from pythonDemo import myplot, slin, sqfun
   ...:
   ...: import matplotlib.pyplot as plt
   ...: myplot(0,100,1,slin,sqfun)
   ...: plt.legend(loc="best")
   ...: import math
   ...: plt.plot([41+40*math.cos(th/10) for th in range(50)],
   ...:           [100+100*math.sin(th/10) for th in range(50)])
   ...: plt.text(40,100,"ellipse?")
   ...: plt.xscale('log')
   ...:
   ...:
[66, 66, 66, 66, 66]
[10, 11, 12, 13, 14]
[14, 14, 14, 14, 14]
[10, 11, 12, 13, 14]
myrange(2,30,3): [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]

In [9]: edit agents.py
Editing... done. Executing edited code...
  File "C:\Users\David.Jones\Downloads\aipython\agents.py", line 133
    plt.show()
              ^
TabError: inconsistent use of tabs and spaces in indentation


In [10]: edit agents.py
Editing... done. Executing edited code...

In [11]: exit
PS C:\Users\David.Jones\Downloads\aipython> py -m IPython
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.18.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: edit agents.py
Editing... done. Executing edited code...

In [2]: edit agents.py
Editing... done. Executing edited code...

In [3]: exit
PS C:\Users\David.Jones\Downloads\aipython> py -m IPython
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.18.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: edit agents.py
Editing... done. Executing edited code...

In [2]: load agents.py

   ...:         percepts = env.initial_percepts()
   ...:         self.ave = self.last_price = percepts['price']
   ...:         self.instock = percepts['instock']
   ...:
   ...:         percepts = env.initial_percepts()
   ...:         self.ave = self.last_price = percepts['price']
   ...:         self.instock = percepts['instock']
   ...:
   ...:     def go(self, n):
   ...:         """go for n time steps
   ...:         """
   ...:         for i in range(n):
   ...:             if self.last_price < 0.9*self.ave and self.instock < 60:
   ...:                 tobuy = 48
   ...:             elif self.instock < 12:
   ...:                 tobuy = 12
   ...:             else:
   ...:                 tobuy = 0
   ...:             self.spent += tobuy*self.last_price
   ...:             percepts = env.do({'buy': tobuy})
   ...:             self.last_price = percepts['price']
   ...:             self.ave = self.ave+(self.last_price-self.ave)*0.05
   ...:             self.instock = percepts['instock']
   ...:
   ...: env = TP_env()
   ...: ag = TP_agent(env)
   ...: ag.go(90)
   ...: ag.spent/env.time   ## average spent per time period
   ...:
   ...: import matplotlib.pyplot as plt
   ...:
   ...: class Plot_prices(object):
   ...:     """Set up the plot for history of price and number in stock"""
   ...:     def __init__(self, ag,env):
   ...:         self.ag = ag
   ...:         self.env = env
   ...:         # plt.ion() COMMENTED OUT
   ...:         plt.xlabel("Time")
   ...:         plt.ylabel("Number in stock.                                              Price.")
   ...:
   ...:     def plot_run(self):
   ...:         """plot history of price and instock"""
   ...:         num = len(env.stock_history)
   ...:         plt.plot(range(num),env.stock_history,label="In stock")
   ...:         plt.plot(range(num),env.price_history,label="Price")
   ...:         plt.legend(loc="upper left")
   ...:         #plt.draw() COMMENTED OUT
   ...:         plt.show()
   ...:         plt.savefig('G01064967_1_a.png')
   ...:
   ...: pl = Plot_prices(ag,env)
   ...: ag.go(90); pl.plot_run()
   ...:

In [4]: edit agents.py
Editing... done. Executing edited code...

In [5]: load agents.py

   ...:         percepts = env.initial_percepts()
   ...:         self.ave = self.last_price = percepts['price']
   ...:         self.instock = percepts['instock']
   ...:
   ...:     def go(self, n):
   ...:         """go for n time steps
   ...:         """
   ...:         for i in range(n):
   ...:             if self.last_price < 0.9*self.ave and self.instock < 60:
   ...:                 tobuy = 48
   ...:             elif self.instock < 12:
   ...:                 tobuy = 12
   ...:             else:
   ...:                 tobuy = 0
   ...:             self.spent += tobuy*self.last_price
   ...:             percepts = env.do({'buy': tobuy})
   ...:             self.last_price = percepts['price']
   ...:             self.ave = self.ave+(self.last_price-self.ave)*0.05
   ...:             self.instock = percepts['instock']
   ...:
   ...: env = TP_env()
   ...: ag = TP_agent(env)
   ...: ag.go(90)
   ...: ag.spent/env.time   ## average spent per time period
   ...:
   ...: import matplotlib.pyplot as plt
   ...:
   ...: class Plot_prices(object):
   ...:     """Set up the plot for history of price and number in stock"""
   ...:     def __init__(self, ag,env):
   ...:         self.ag = ag
   ...:         self.env = env
   ...:         # plt.ion() COMMENTED OUT
   ...:         plt.xlabel("Time")
   ...:         plt.ylabel("Number in stock.                                              Price.")
   ...:
   ...:     def plot_run(self):
   ...:         """plot history of price and instock"""
   ...:         num = len(env.stock_history)
   ...:         plt.plot(range(num),env.stock_history,label="In stock")
   ...:         plt.plot(range(num),env.price_history,label="Price")
   ...:         plt.legend(loc="upper left")
   ...:         #plt.draw() COMMENTED OUT
   ...:         plt.show()
   ...:         plt.savefig('G01064967_1_b.png')
   ...:
   ...: pl = Plot_prices(ag,env)
   ...: ag.go(90); pl.plot_run()
   ...:

In [7]: edit agents.py
Editing... done. Executing edited code...

In [8]: load agents.py

   ...:         percepts = env.initial_percepts()
   ...:         self.ave = self.last_price = percepts['price']
   ...:         self.instock = percepts['instock']
   ...:
   ...:     def go(self, n):
   ...:         """go for n time steps
   ...:         """
   ...:         for i in range(n):
   ...:             if self.last_price < 0.9*self.ave and self.instock < 60:
   ...:                 tobuy = 48
   ...:             elif self.instock < 12:
   ...:                 tobuy = 12
   ...:             else:
   ...:                 tobuy = 0
   ...:             self.spent += tobuy*self.last_price
   ...:             percepts = env.do({'buy': tobuy})
   ...:             self.last_price = percepts['price']
   ...:             self.ave = self.ave+(self.last_price-self.ave)*0.05
   ...:             self.instock = percepts['instock']
   ...:
   ...: env = TP_env()
   ...: ag = TP_agent(env)
   ...: ag.go(90)
   ...: ag.spent/env.time   ## average spent per time period
   ...:
   ...: import matplotlib.pyplot as plt
   ...:
   ...: class Plot_prices(object):
   ...:     """Set up the plot for history of price and number in stock"""
   ...:     def __init__(self, ag,env):
   ...:         self.ag = ag
   ...:         self.env = env
   ...:         # plt.ion() COMMENTED OUT
   ...:         plt.xlabel("Time")
   ...:         plt.ylabel("Number in stock.                                              Price.")
   ...:
   ...:     def plot_run(self):
   ...:         """plot history of price and instock"""
   ...:         num = len(env.stock_history)
   ...:         plt.plot(range(num),env.stock_history,label="In stock")
   ...:         plt.plot(range(num),env.price_history,label="Price")
   ...:         plt.legend(loc="upper left")
   ...:         #plt.draw() COMMENTED OUT
   ...:         plt.show()
   ...:         plt.savefig('G01064967_1.png')
   ...:
   ...: pl = Plot_prices(ag,env)
   ...: ag.go(90); pl.plot_run()
   ...:

In [10]: exit
PS C:\Users\David.Jones\Downloads\aipython> stop-transcript
**********************
Windows PowerShell transcript end
End time: 20200902031541
**********************
